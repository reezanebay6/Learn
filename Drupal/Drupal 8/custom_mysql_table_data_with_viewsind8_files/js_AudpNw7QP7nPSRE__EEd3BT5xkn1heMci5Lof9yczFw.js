/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function(e,t){typeof module!="undefined"?module.exports=t():typeof define=="function"&&typeof define.amd=="object"?define(t):this[e]=t()}("domready",function(){var e=[],t,n=document,r=n.documentElement.doScroll,i="DOMContentLoaded",s=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return s||n.addEventListener(i,t=function(){n.removeEventListener(i,t),s=1;while(t=e.shift())t()}),function(t){s?setTimeout(t,0):e.push(t)}});
!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):e.quicklink=n()}(this,function(){var e={};function n(e){return new Promise(function(n,t){var r=new XMLHttpRequest;r.open("GET",e,r.withCredentials=!0),r.onload=function(){200===r.status?n():t()},r.send()})}var t,r,o=(t="prefetch",(r=document.createElement("link")).relList&&r.relList.supports&&r.relList.supports(t)?function(e){return new Promise(function(n,t){var r=document.createElement("link");r.rel="prefetch",r.href=e,r.onload=n,r.onerror=t,document.head.appendChild(r)})}:n);function i(t,r,i){if(!(e[t]||(i=navigator.connection)&&((i.effectiveType||"").includes("2g")||i.saveData)))return(r?function(e){return null==self.fetch?n(e):fetch(e,{credentials:"include"})}:o)(t).then(function(){e[t]=!0})}var u=window.requestIdleCallback||function(e){var n=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-n))}})},1)},c=new Set,f=window.IntersectionObserver&&new IntersectionObserver(function(e){e.forEach(function(e){if(e.isIntersecting){var n=e.target;c.has(n.href)&&(f.unobserve(n),a(n.href))}})});function a(e){c.delete(e),i(new URL(e,location.href).toString(),f.priority)}return function(e){e||(e={}),f&&(f.priority=e.priority||!1);var n=e.origins||[location.hostname],t=e.ignores||[];(e.timeoutFn||u)(function(){e.urls?e.urls.forEach(a):f&&Array.from((e.el||document).querySelectorAll("a"),function(e){f.observe(e),n.length&&!n.includes(e.hostname)||function e(n,t){return Array.isArray(t)?t.some(function(t){return e(n,t)}):(t.test||t).call(t,n.href,n)}(e,t)||c.add(e.href)})},{timeout:e.timeout||2e3})}});
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function () {
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');

  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

window.Drupal = { behaviors: {}, locale: {} };

(function (Drupal, drupalSettings, drupalTranslations) {
  Drupal.throwError = function (error) {
    setTimeout(function () {
      throw error;
    }, 0);
  };

  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;

    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].attach === 'function') {
        try {
          behaviors[i].attach(context, settings);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;

    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].detach === 'function') {
        try {
          behaviors[i].detach(context, settings, trigger);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.checkPlain = function (str) {
    str = str.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    return str;
  };

  Drupal.formatString = function (str, args) {
    var processedArgs = {};

    Object.keys(args || {}).forEach(function (key) {
      switch (key.charAt(0)) {
        case '@':
          processedArgs[key] = Drupal.checkPlain(args[key]);
          break;

        case '!':
          processedArgs[key] = args[key];
          break;

        default:
          processedArgs[key] = Drupal.theme('placeholder', args[key]);
          break;
      }
    });

    return Drupal.stringReplace(str, processedArgs, null);
  };

  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    if (!Array.isArray(keys)) {
      keys = Object.keys(args || {});

      keys.sort(function (a, b) {
        return a.length - b.length;
      });
    }

    if (keys.length === 0) {
      return str;
    }

    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }
    return str;
  };

  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    try {
      url = decodeURIComponent(url);
    } catch (e) {}

    urlParsingNode.setAttribute('href', url);

    return urlParsingNode.cloneNode(false).href;
  };

  Drupal.url.isLocal = function (url) {
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = window.location.protocol;

    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }
    var baseUrl = protocol + '//' + window.location.host + drupalSettings.path.baseUrl.slice(0, -1);

    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    } catch (e) {}
    try {
      baseUrl = decodeURIComponent(baseUrl);
    } catch (e) {}

    return absoluteUrl === baseUrl || absoluteUrl.indexOf(baseUrl + '/') === 0;
  };

  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;

    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula.default;
    } else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  Drupal.theme = function (func) {
    if (func in Drupal.theme) {
      var _Drupal$theme;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return (_Drupal$theme = Drupal.theme)[func].apply(_Drupal$theme, args);
    }
  };

  Drupal.theme.placeholder = function (str) {
    return '<em class="placeholder">' + Drupal.checkPlain(str) + '</em>';
  };
})(Drupal, window.drupalSettings, window.drupalTranslations);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

if (window.jQuery) {
  jQuery.noConflict();
}

document.documentElement.className += ' js';

(function (domready, Drupal, drupalSettings) {
  domready(function () {
    Drupal.attachBehaviors(document, drupalSettings);
  });
})(domready, Drupal, window.drupalSettings);;
(function () {

  'use strict';

  Drupal.behaviors.quicklink = {
    attach: function attachQuicklink(context, settings) {
      var debug = settings.quicklink.debug;

      function hydrateQuicklinkConfig() {
        settings.quicklink.quicklinkConfig = settings.quicklink.quicklinkConfig || {};
        settings.quicklink.ignoredSelectorsLog = settings.quicklink.ignoredSelectorsLog || [];

        var quicklinkConfig = settings.quicklink.quicklinkConfig;

        quicklinkConfig.ignores = [];

        // Loop through all the patters to ignore, and generate rules to ignore URL patterns.
        for (var i = 0; i < settings.quicklink.url_patterns_to_ignore.length; i++) {
          var pattern = settings.quicklink.url_patterns_to_ignore[i];

          (function (i, pattern) {
            if (pattern.length) {
              quicklinkConfig.ignores.push(function (uri, elem) {
                var ruleName = 'Pattern found in href. See ignored selectors log.';
                var ruleFunc = uri.includes(pattern);

                outputDebugInfo(ruleFunc, ruleName, uri, elem, pattern);

                return ruleFunc;
              });
            }
          })(i, pattern);
        }

        if (settings.quicklink.ignore_admin_paths) {
          var adminLinkContainerPatterns = settings.quicklink.admin_link_container_patterns.join();

          quicklinkConfig.ignores.push(function (uri, elem) {
            var ruleName = 'Exists in admin element container.';
            var ruleFunc = elem.matches(adminLinkContainerPatterns);

            outputDebugInfo(ruleFunc, ruleName, uri, elem);

            return ruleFunc;
          });
        }

        if (settings.quicklink.ignore_ajax_links) {
          quicklinkConfig.ignores.push(function (uri, elem) {
            var ruleName = 'Link has "use-ajax" CSS class.';
            var ruleFunc = elem.classList.contains('use-ajax');

            outputDebugInfo(ruleFunc, ruleName, uri, elem);

            return ruleFunc;
          });

          quicklinkConfig.ignores.push(function (uri, elem) {
            var ruleName = 'Link has "/ajax" in url.';
            var ruleFunc = uri.includes('/ajax');

            outputDebugInfo(ruleFunc, ruleName, uri, elem);

            return ruleFunc;
          });
        }

        if (settings.quicklink.ignore_file_ext) {
          quicklinkConfig.ignores.push(function (uri, elem) {
            var ruleName = 'Contains file extension at end of href.';
            var ruleFunc = uri.match(/(\.[^\/]{1,5}\?)|(\.[^\/]{1,5}$)/);

            outputDebugInfo(ruleFunc, ruleName, uri, elem);

            return ruleFunc;
          });
        }

        quicklinkConfig.ignores.push(function (uri, elem) {
          var ruleName = 'Contains noprefetch attribute.';
          var ruleFunc = elem.hasAttribute('noprefetch');

          outputDebugInfo(ruleFunc, ruleName, uri, elem);

          return ruleFunc;
        });

        quicklinkConfig.ignores.push(function (uri, elem) {
          var ruleName = 'Contains download attribute.';
          var ruleFunc = elem.hasAttribute('download');

          outputDebugInfo(ruleFunc, ruleName, uri, elem);

          return ruleFunc;
        });

        quicklinkConfig.origins = (settings.quicklink.allowed_domains) ? settings.quicklink.allowed_domains : false;
        quicklinkConfig.urls = (settings.quicklink.prefetch_only_paths) ? settings.quicklink.prefetch_only_paths : false;
      }

      function outputDebugInfo(ruleFunc, ruleName, uri, elem, pattern) {
        if (debug && ruleFunc) {
          var debugMessage = ruleName + ' Link ignored.';
          var thisLog = {};
          var urlPattern = pattern || false;

          elem.classList.add('quicklink-ignore');
          elem.textContent += '🚫';
          elem.dataset.quicklinkMatch = debugMessage;

          thisLog.ruleName = ruleName;
          thisLog.uri = uri;
          thisLog.elem = elem;
          thisLog.message = debugMessage;

          if (urlPattern) {
            thisLog.urlPattern = urlPattern;
          }

          (function (thisLog) {
            settings.quicklink.ignoredSelectorsLog.push(thisLog);
          })(thisLog);
        }
      }

      function loadQuicklink() {
        var urlParams = new URLSearchParams(window.location.search);
        var noprefetch = urlParams.get('noprefetch') !== null || window.location.hash === '#noprefetch' ;

        if (noprefetch && debug) {
          // eslint-disable-next-line no-console
          console.info('The "noprefetch" parameter or hash exists in the URL. Quicklink library not loaded.');
        }

        return window.quicklink && !noprefetch;
      }

      if (!settings.quicklink.quicklinkConfig) {
        hydrateQuicklinkConfig();
      }

      settings.quicklink.quicklinkConfig.el = (settings.quicklink.selector) ? context.querySelector(settings.quicklink.selector) : context;

      if (debug) {
        console.info('Quicklink config object', settings.quicklink.quicklinkConfig); // eslint-disable-line no-console
        console.info('Quicklink module debug log', settings.quicklink.debug_log); // eslint-disable-line no-console
        console.info('Quicklink ignored selectors', settings.quicklink.ignoredSelectorsLog); // eslint-disable-line no-console
      }

      if (loadQuicklink()) {
        quicklink(settings.quicklink.quicklinkConfig);
      }
    }
  };
})();
;
'use strict';
/*
 *  IE11 polyfills.
 */
if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector;
}

if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    thisArg = thisArg || window;
    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}
;
"use strict";!function(){function t(){i||(i=!0,window.requestAnimationFrame?window.requestAnimationFrame(e):setTimeout(e,66))}function e(){a.forEach(function(e){e()}),i=!1}var a,i,n,o;function r(){o||(o=!0,window.requestAnimationFrame?window.requestAnimationFrame(s):setTimeout(s,66))}function s(){n.forEach(function(e){e()}),o=!1}document.querySelector("html").classList.remove("no-js"),void 0===Drupal.helper&&(Drupal.helper={}),Drupal.helper.optimizedResize=(i=!(a=[]),{add:function(e){a.length||window.addEventListener("resize",t),function(e){e&&a.push(e)}(e)}}),Drupal.helper.optimizedScroll=(o=!(n=[]),{add:function(e){n.length||document.addEventListener("scroll",r,{passive:!0}),function(e){e&&n.push(e)}(e)}}),Drupal.behaviors.headerScrollInteractions={attach:function(e){var a,i=document.querySelector(".site-header"),n=i.querySelector(".site-header__bg"),o=e.querySelector(".path-frontpage .site-content > section:first-of-type"),r=e.querySelector(".path-frontpage .site-content > section:nth-of-type(2) > h2");function t(){(a=i.getBoundingClientRect()).topPage=a.top+window.pageYOffset}function s(){return o&&!document.querySelector("body").classList.contains("toolbar-fixed")&&window.matchMedia("(min-width: 1120px)").matches&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches}function c(){var e=window.pageYOffset;if(e<=a.topPage){var t=a.left/a.topPage*e;n.style.transform="scalex("+(2*t+a.width)/a.width+")",i.classList.remove("is-fixed"),s()&&(o.style.transform="translatex(-50%) translatey(-"+e+"px)",o.style.opacity=1,r.style.opacity=1-e/a.topPage)}else n.style.transform="scalex("+window.innerWidth/a.width+")",i.classList.add("is-fixed"),s()&&(o.style.transform="translatex(-50%) translatey(-"+(a.topPage+(e-a.topPage)/3.2)+"px)",o.style.opacity=(500-e)/(500-a.topPage),r.style.opacity=0)}t(),c(),s()&&document.querySelector(".path-frontpage .site-content").classList.add("js-scroll-effect"),Drupal.helper.optimizedScroll.add(c),Drupal.helper.optimizedResize.add(t),Drupal.helper.optimizedResize.add(function(){o&&!s()&&(o.style.transform="",o.style.opacity="")})}},Drupal.behaviors.headerSearchInteractions={attach:function(e){var t="block-lullabotcom-search",a=document.getElementById(t),i=a.querySelector(".form-item-keys input"),n=document.querySelector(".site-header__search-button");function o(){a.setAttribute("aria-expanded","false"),n.setAttribute("aria-pressed","false"),n.setAttribute("aria-expanded","false"),document.removeEventListener("keyup",r),n.focus()}function r(e){27===e.keyCode&&o()}function s(e){e.target.matches("#".concat(t," form"))&&"true"===a.getAttribute("aria-expanded")?i.focus():e.target.matches("#".concat(t," form"))&&(a.classList.add("large-screen-visibility-hidden"),document.removeEventListener("transitionend",s))}a.classList.add("large-screen-visibility-hidden"),n.setAttribute("aria-controls",t),document.addEventListener("click",function(e){e.target.matches(".site-header__search-button, .site-header__search-button *")?(a.style.width=document.querySelector(".header-main-menu__list").offsetWidth+60+"px",n.setAttribute("aria-pressed","true"),n.setAttribute("aria-expanded","true"),a.setAttribute("aria-expanded","true"),a.classList.remove("large-screen-visibility-hidden"),document.addEventListener("transitionend",s,{passive:!0}),document.addEventListener("keyup",r,{passive:!0})):e.target.matches("#".concat(t,", #").concat(t," *"))||"true"!==a.getAttribute("aria-expanded")||o()},{passive:!0}),document.addEventListener("touchstart",function(e){e.target.matches("#".concat(t,", #").concat(t," *"))||"true"!==a.getAttribute("aria-expanded")||o()},{passive:!0})}},Drupal.behaviors.episodeToggleTranscript={attach:function(e){var t=e.querySelector(".episode__transcript"),a=e.querySelector(".episode__transcript__bottom button");a&&a.addEventListener("click",function(){if(t.classList.contains("is-active"))t.style.maxHeight="",a.textContent="Show Full Transcript";else{var e=t.querySelector("dl").clientHeight+300;t.style.maxHeight=e+"px",a.textContent="Collapse Transcript"}t.classList.toggle("is-active")})}},Drupal.behaviors.videoCallout={attach:function(e){var a=e.querySelector(".video-callout__play");a&&a.addEventListener("click",function(){var e=a.previousElementSibling.getElementsByTagName("iframe")[0],t=setInterval(function(){a.style.opacity||(a.style.opacity=1),0<a.style.opacity?a.style.opacity-=.1:(clearInterval(t),a.style.display="none",e.setAttribute("tabindex","-1"),e.src=e.src.replace("autoplay=0","autoplay=1"))},50)})}},Drupal.behaviors.scrollAnalytics={attach:function(e){var i=e.querySelector("main.site-content");if(null!=i){var n,o=[],r=!1;e!==document||i.classList.contains("scroll-analytics")||(n=-1,t(),Drupal.helper.optimizedResize.add(t),Drupal.helper.optimizedScroll.add(function(){if(r&&"function"==typeof ga&&void 0!==o[1]){var i=(window.pageYOffset||document.documentElement.scrollTop)-(document.documentElement.clientTop||0);o.slice(0).reverse().map(function(e,t){var a=-1*t+3;n<a&&e<=i&&(ga("send","event","Scroll Progress","Scrolled past "+a+" / 3",window.location.pathname,{nonInteraction:a<2}),n=a)})}}),i.classList.add("scroll-analytics"))}function t(){if(2*window.innerHeight>=document.innerHeight)r=!1;else{r=!0;for(var e=i.getBoundingClientRect(),t=i.offsetHeight,a=1;a<=3;a++)o[a-1]=Math.floor(a/3*(t-window.innerHeight)+e.top+window.scrollY)}}}},Drupal.behaviors.videoInline={attach:function(e){document.querySelectorAll(".video--captioned video").forEach(function(e,t){var a=String(e.offsetWidth);e.parentElement.style.maxWidth=a.concat("px")})}}}();;
// @see https://developers.google.com/analytics/devguides/collection/analyticsjs/
window.ga = window.ga || function () { (ga.q = ga.q || []).push(arguments) }; ga.l = +new Date;
ga('create', 'UA-1261484-1', 'auto');
ga('send', 'pageview');
;
